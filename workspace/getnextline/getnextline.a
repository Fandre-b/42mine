!<arch>
//                                              24        `
get_next_line_utils.c/

get_next_line.c/0           0     0     644     3014      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fandre-b <fandre-b@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/12 14:08:40 by fandre-b          #+#    #+#             */
/*   Updated: 2023/11/13 21:21:52 by fandre-b         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char *get_next_line(int fd)
{
	char 	*new_str;
	static char buffer[BUFFER_SIZE + 1];

	if (fd <= 0 || fd > 16 || read(fd, 0, 0) < 0)
		return (NULL);
	new_str = (char *)malloc(sizeof(char) * (1));
	if (!new_str)
		return (NULL);
	new_str[0] = '\0';
	new_str = ft_process_buffer(fd, new_str, buffer);
	/* if (!new_str[0])
    {
        free(new_str);
        return (NULL);
    } */
	return (new_str);
}

char	*ft_process_buffer(int fd, char *new_str, char *buffer)
{
	int	count;
	int	newline_pos;
	
	count = 1;
	while (count > 0 || buffer[0] != '\0')
	{	
		buffer[BUFFER_SIZE] = '\0';
		newline_pos = ft_strchr_index(buffer, '\n');
		if (newline_pos >= 0)
		{
			new_str = ft_strnjoin(new_str, buffer, newline_pos + 1);
			buffer = ft_memshift(buffer, newline_pos + 1);
			break ;
		}
		new_str = ft_strnjoin(new_str, buffer, BUFFER_SIZE);
		buffer = ft_clearbuffer(buffer, BUFFER_SIZE + 1);
		count = read (fd, buffer, BUFFER_SIZE);
	}
	/* if (count == 0 && !new_str[0])
	{
		free(buffer);
		return (NULL);
	} */
	if (!new_str[0] || count == -1)
	{
		free(new_str);
		return (NULL);
	}
	return (new_str);
}

int	main(void)
{
	int	fd;
	char	*str;

	fd = open("text.txt", O_RDONLY);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	/* 
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);*/
	return (0);
}


/*
char *Find_or_create_node(t_list **head, int fd) 
{
    t_list *r_node;

    if (!*head) 
    {
        r_node = Create_node(head, fd);
        return (r_node);
    } 
    r_node = *head;
    while (r_node->next) 
    {
        r_node = r_node->next;
        if (r_node->fd == fd) 
            return (r_node);
    }

    r_node = Create_node(head, fd);
    return (r_node);
}*/


/0              0           0     0     644     2267      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line_utils.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: fandre-b <fandre-b@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/11/12 14:09:00 by fandre-b          #+#    #+#             */
/*   Updated: 2023/11/13 21:21:27 by fandre-b         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char  *ft_strnjoin(char *old_str, char *str_add, int size)
{
    char    *new_str;
    int        i;

    i = 0;
    while (old_str[i])
        i++;
    new_str = (char *)malloc(sizeof(char) * (i + size + 1));
    if (!new_str)
        return (NULL);
    new_str[i + size] = '\0';
    while (size-- > 0)
        new_str[i + size] = str_add[size];
    while (--i >= 0)
        new_str[i] = old_str[i];
    free(old_str);
    return (new_str);
}

int		ft_strchr_index(char *str, char c)
{
    int		i;

    i = 0;
    while (str[i] && str[i] != c)
        i++;
    if (str[i] == '\0')
        return (-1);
    return (i);
}
/* 
char	*ft_strchr(char *str, char c)
{
    int		i;

    i = 0;
    while (str[i] && str[i] != c)
        i++;
    if (str[i] == '\0')
        return (&str[i]);
    return (&str[i]);
} */

char	*ft_clearbuffer(void *str, int size)
{
	char	*char_str;

	char_str = (char *) str;
	while (size > 0)
		char_str[--size] = (char) '\0';
	return (str);
}

char    *ft_memshift(void *str, int n_shift)
{
    int i;
    char *shifted_str;

    i = 0;
    if (n_shift == 0)
        return (str);
    shifted_str = (char *) str;
    while (shifted_str[i + n_shift])
    {
        shifted_str[i] = shifted_str[n_shift + i];
        i++;
    }
    while (i != (BUFFER_SIZE + 1))
        shifted_str[i++] = '\0';
    return (shifted_str);
}

test_func.c/    0           0     0     644     900       `
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>
#include <ctype.h> 
#include <stdbool.h> 
#include <errno.h>
#include <limits.h>
#include <math.h>
#include <stddef.h>
#include <time.h>
#include <wchar.h>
#include <fcntl.h>
#include "get_next_line.h"

int	main(void)
{
	int	fd;
	char	*str;

	fd = open("Loren.txt", O_RDONLY);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	/* str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str);
	str = get_next_line(fd);
	printf("//////////\n");
	free(str); */
	return (0);
}